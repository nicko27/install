from pathlib import Path
from typing import Dict, Any, List, Tuple, Optional, Union
from textual.app import ComposeResult
from textual.containers import Horizontal
from textual.widgets import Label, Button

from .plugin_utils import load_plugin_info
from .sequence_handler import SequenceHandler
from ..utils.logging import get_logger

logger = get_logger('plugin_list_item')

class PluginListItem(Horizontal):
    """
    Repr√©sente un √©l√©ment dans la liste des plugins s√©lectionn√©s.
    
    Cette classe g√®re l'affichage d'un plugin ou d'une s√©quence
    dans le panneau de plugins s√©lectionn√©s.
    """

    def __init__(self, plugin_data: Union[tuple, 'PluginInstance'], index: int):
        """
        Initialise un √©l√©ment de liste pour un plugin s√©lectionn√©.
        
        Args:
            plugin_data: Tuple (nom, id, config, metadata) ou PluginInstance
            index: Position dans la liste des plugins
        """
        super().__init__()
        
        # D√©terminer le type de donn√©es d'entr√©e
        if isinstance(plugin_data, tuple):
            # Gestion des tuples avec diff√©rentes longueurs
            if len(plugin_data) == 2:
                self.plugin_name, self.instance_id = plugin_data
                self.config = {}
                self.metadata = {}
            elif len(plugin_data) == 3:
                self.plugin_name, self.instance_id, self.config = plugin_data
                self.metadata = {}
            elif len(plugin_data) >= 4:
                self.plugin_name, self.instance_id, self.config, self.metadata = plugin_data
            else:
                raise ValueError("Format de donn√©es invalide pour plugin_data")
        else:
            # Si c'est un PluginInstance ou un objet compatible
            self.plugin_name = getattr(plugin_data, 'name', 'Unknown')
            self.instance_id = getattr(plugin_data, 'instance_id', 0)
            self.config = getattr(plugin_data, 'config', {})
            self.metadata = getattr(plugin_data, 'metadata', {})
        
        self.index = index  # Index de l'√©l√©ment dans la liste
        
        # V√©rifier si c'est une s√©quence
        self.is_sequence = isinstance(self.plugin_name, str) and self.plugin_name.startswith('__sequence__')
        
        # Attributs pour les plugins faisant partie d'une s√©quence
        # Ces attributs peuvent √™tre d√©finis plus tard par SelectedPluginsPanel
        self.is_part_of_sequence = (self.metadata.get('source') == 'sequence')
        self.sequence_id = self.metadata.get('sequence_id')
        self.sequence_name = None  # Sera d√©fini par SelectedPluginsPanel si n√©cessaire
        
        # Charger les informations du plugin ou de la s√©quence
        if self.is_sequence:
            # Pour les s√©quences, charger les informations depuis le fichier YAML
            default_info = self._load_sequence_info(self.plugin_name)
        else:
            default_info = {
                "name": self.plugin_name,
                "icon": "üì¶"
            }
        
        self.plugin_info = load_plugin_info(self.plugin_name, default_info)
        logger.debug(f"Plugin/s√©quence initialis√©: {self.plugin_name} (ID: {self.instance_id})")

    def _load_sequence_info(self, sequence_name: str) -> Dict[str, Any]:
        """
        Charge les informations d'une s√©quence depuis son fichier YAML.
        
        Args:
            sequence_name: Nom de la s√©quence (format __sequence__nom)
            
        Returns:
            Dict[str, Any]: Informations de base de la s√©quence
        """
        try:
            # Utiliser SequenceHandler pour charger la s√©quence
            sequence_handler = SequenceHandler()
            
            # Extraire le nom du fichier de s√©quence
            file_name = sequence_name.replace('__sequence__', '')
            if not file_name.endswith('.yml'):
                file_name = f"{file_name}.yml"
                
            sequence_path = Path('sequences') / file_name
            
            if not sequence_path.exists():
                logger.warning(f"Fichier de s√©quence non trouv√©: {sequence_path}")
                return {"name": file_name, "icon": "‚öôÔ∏è"}
                
            # Charger la s√©quence
            sequence_data = sequence_handler.load_sequence(sequence_path)
            
            if not sequence_data:
                logger.warning(f"Donn√©es de s√©quence invalides: {sequence_path}")
                return {"name": file_name, "icon": "‚öôÔ∏è"}
                
            return {
                "name": sequence_data.get('name', file_name),
                "icon": "‚öôÔ∏è",
                "description": sequence_data.get('description', ''),
                "plugins_count": len(sequence_data.get('plugins', []))
            }
                
        except Exception as e:
            logger.error(f"Erreur lors du chargement de la s√©quence {sequence_name}: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return {"name": "Erreur", "icon": "‚öôÔ∏è", "description": str(e)}
    
    def set_sequence_attributes(self, is_part_of_sequence: bool, sequence_id: Optional[int] = None, sequence_name: Optional[str] = None) -> None:
        """
        Met √† jour les attributs de s√©quence et rafra√Æchit l'affichage.
        
        Args:
            is_part_of_sequence: Indique si ce plugin fait partie d'une s√©quence
            sequence_id: ID de la s√©quence √† laquelle ce plugin appartient
            sequence_name: Nom de la s√©quence √† laquelle ce plugin appartient
        """
        # Mettre √† jour les attributs
        self.is_part_of_sequence = is_part_of_sequence
        self.sequence_id = sequence_id
        self.sequence_name = sequence_name
        
        # Mettre √† jour les m√©tadonn√©es pour coh√©rence
        if is_part_of_sequence and sequence_id is not None:
            self.metadata['source'] = 'sequence'
            self.metadata['sequence_id'] = sequence_id
            if sequence_name:
                self.metadata['sequence_name'] = sequence_name
        
        # Forcer le rafra√Æchissement de l'affichage
        self.refresh()
        
        logger.debug(f"Attributs de s√©quence mis √† jour pour {self.plugin_name} (sequence: {sequence_name})")
    
    def compose(self) -> ComposeResult:
        """
        Compose l'affichage de l'√©l√©ment.
        
        Returns:
            ComposeResult: R√©sultat de la composition
        """
        # D√©terminer les informations d'affichage en fonction du type
        if self.is_sequence:
            # Pour les s√©quences
            name = self.plugin_info.get('name', self.plugin_name.replace('__sequence__', ''))
            icon = self.plugin_info.get('icon', '‚öôÔ∏è')
        else:
            # Pour les plugins normaux
            name = self.plugin_info.get('name', self.plugin_name)
            icon = self.plugin_info.get('icon', 'üì¶')
        
        logger.debug(f"Composition de l'√©l√©ment {self.plugin_name} (is_sequence: {self.is_sequence})")
        
        # D√©terminer les classes du label
        label_classes = "plugin-list-name"
        
        if self.is_sequence:
            # Style sp√©cifique pour les s√©quences
            label_classes += " sequence-list-name"
        elif self.is_part_of_sequence:
            # Style pour les plugins faisant partie d'une s√©quence
            label_classes += " sequence-list-name"
            if self.sequence_id is not None:
                label_classes += f" sequence-item-name sequence-plugin sequence-{self.sequence_id}"
        
        # Cr√©ation du texte √† afficher
        if self.is_sequence:
            # Texte sp√©cifique pour les s√©quences
            sequence_name = name if name else "Sans nom"
            display_text = f"{icon} S√âQUENCE: {sequence_name}"
        else:
            # Texte standard pour les plugins
            display_text = f"{icon}  {name}"
            
        # Cr√©er et retourner le label avec d√©sactivation de l'interpr√©tation du markup
        yield Label(display_text, classes=label_classes, markup=False)
        
        # Cr√©er un ID pour le bouton de suppression
        if self.is_sequence:
            # ID sp√©cial pour les s√©quences
            safe_name = f"seq_{self.instance_id}"
        else:
            # Pour les plugins normaux, nettoyer le nom
            safe_name = ''.join(c if c.isalnum() or c == '_' else '_' for c in self.plugin_name)
            # √âviter les ID trop longs
            if len(safe_name) > 20:
                safe_name = safe_name[:20]
            safe_name = f"{safe_name}_{self.instance_id}"
            
        button_id = f"remove_{safe_name}"
        
        # D√©terminer les classes du bouton
        if self.is_sequence:
            button_classes = "remove-button sequence-remove-button"
        elif self.is_part_of_sequence:
            # Masquer le bouton pour les plugins d'une s√©quence
            button_classes = "remove-button hidden"
        else:
            button_classes = "remove-button"
        
        # Cr√©er et retourner le bouton de suppression
        yield Button("X", id=button_id, variant="error", classes=button_classes)