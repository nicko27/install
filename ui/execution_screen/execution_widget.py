"""
Widget principal d'exÃ©cution de plugins.
"""

import asyncio
import threading
from typing import Dict

from textual.app import ComposeResult
from textual.containers import Container, Horizontal, ScrollableContainer, Vertical
from textual.widgets import Button, Checkbox, Label, ProgressBar, Static, Footer, Header
from textual.reactive import reactive
from textual.binding import Binding

from .plugin_container import PluginContainer
from .local_executor import LocalExecutor
from .ssh_executor import SSHExecutor
from .logger_utils import LoggerUtils
from ..utils.messaging import Message, MessageType
from ..choice_screen.plugin_utils import get_plugin_folder_name
from ..utils.logging import get_logger

logger = get_logger('execution_widget')

class ExecutionWidget(Container):
    """Widget principal d'exÃ©cution des plugins"""

    # Ã‰tat d'exÃ©cution
    is_running = reactive(False)
    continue_on_error = reactive(False)
    show_logs = reactive(True)  # Logs visibles par dÃ©faut
    
    # Raccourcis clavier
    BINDINGS = [
        Binding("l", "toggle_logs", "Afficher/Masquer logs"),
    ]
    
    class ExecutionCompleted(Message):
        """Message indiquant que l'exÃ©cution est terminÃ©e"""
        pass
    
    def __init__(self, plugins_config: dict = None):
        """Initialise le widget avec la configuration des plugins"""
        super().__init__()
        self.plugins: Dict[str, PluginContainer] = {}
        self.plugins_config = plugins_config or {}
        self._current_plugin = None
        self._total_plugins = 0
        self._executed_plugins = 0
        self.report_manager = None  # Gestionnaire de rapports
        self.sequence_name = None   # Nom de la sÃ©quence en cours
        logger.debug(f"ExecutionWidget initialized with {len(self.plugins_config)} plugins: {list(self.plugins_config.keys())}")

    async def execute_plugin(self, plugin_id: str, config: dict) -> dict:
        """ExÃ©cute un plugin spÃ©cifique"""
        try:
            # RÃ©cupÃ©rer le nom du plugin depuis son dossier
            folder_name = get_plugin_folder_name(plugin_id)
            
            # ExÃ©cuter le plugin localement ou via SSH selon la configuration
            if config.get('ssh'):
                executor = SSHExecutor(config['ssh'])
            else:
                executor = LocalExecutor()
                
            # ExÃ©cuter le plugin
            success, output = await executor.execute_plugin(folder_name, config)
            
            return {
                'success': success,
                'output': output
            }
            
        except Exception as e:
            logger.error(f"Erreur exÃ©cution plugin {plugin_id}: {e}")
            return {
                'success': False,
                'output': str(e)
            }

    async def run_plugins(self):
        """ExÃ©cute les plugins de faÃ§on sÃ©quentielle"""
        try:
            total_plugins = len(self.plugins)
            logger.debug(f"DÃ©marrage de l'exÃ©cution de {total_plugins} plugins")
            logger.debug(f"Plugins disponibles: {list(self.plugins.keys())}")
            logger.debug(f"Plugins config: {list(self.plugins_config.keys())}")
            executed = 0

            for plugin_id, plugin_widget in self.plugins.items():
                try:
                    logger.debug(f"PrÃ©paration de l'exÃ©cution de {plugin_id}")
                    config = self.plugins_config[plugin_id]
                    plugin_name = plugin_widget.plugin_name
                    self.set_current_plugin(plugin_name)
                    
                    # Initialiser la progression et le statut
                    plugin_widget.update_progress(0.0, "DÃ©marrage...")
                    
                    # ExÃ©cuter le plugin
                    result = await self.execute_plugin(plugin_id, config)
                    success = result.get('success', False)
                    output = result.get('output', '')
                    
                    # Mettre Ã  jour le statut du plugin
                    plugin_widget.set_status("succÃ¨s" if success else "erreur")
                    plugin_widget.set_output(output)
                    plugin_widget.update_progress(100.0, "TerminÃ©")
                    
                    # Ajouter au rapport si activÃ©
                    if self.report_manager:
                        # Extraire l'ID d'instance du plugin_id (dernier nombre)
                        instance_id = int(plugin_id.split('_')[-1])
                        
                        self.report_manager.add_result(
                            plugin_name=plugin_name,
                            instance_id=instance_id,
                            success=success,
                            output=output,
                            sequence_name=self.sequence_name
                        )
                    
                    executed += 1
                    self.update_global_progress(executed / total_plugins * 100)
                    
                    # En cas d'erreur, vÃ©rifier si on continue
                    if not success and not self.continue_on_error:
                        logger.warning(f"ArrÃªt de l'exÃ©cution aprÃ¨s erreur sur {plugin_name}")
                        break
                        
                except Exception as e:
                    error_msg = f"Erreur lors de l'exÃ©cution de {plugin_id}: {str(e)}"
                    logger.error(error_msg)
                    plugin_widget.set_status("erreur")
                    plugin_widget.set_output(error_msg)
                    plugin_widget.update_progress(100.0, "Erreur")
                    
                    # Ajouter l'erreur au rapport
                    if self.report_manager:
                        instance_id = int(plugin_id.split('_')[-1])
                        self.report_manager.add_result(
                            plugin_name=plugin_name,
                            instance_id=instance_id,
                            success=False,
                            output=error_msg,
                            sequence_name=self.sequence_name
                        )
                    
                    if not self.continue_on_error:
                        break
            
            # Notifier la fin de l'exÃ©cution
            self.post_message(self.ExecutionCompleted())
            
        except Exception as e:
            logger.error(f"Erreur globale lors de l'exÃ©cution : {str(e)}")
            raise
                    
    async def start_execution(self):
        """DÃ©marrage de l'exÃ©cution des plugins"""
        # VÃ©rifier si une exÃ©cution est dÃ©jÃ  en cours
        if self.is_running:
            logger.debug("ExÃ©cution dÃ©jÃ  en cours, ignorÃ©")
            return

        start_button = self.query_one("#start-button")
        if not start_button:
            logger.error("Bouton de dÃ©marrage introuvable")
            return

        try:
            # DÃ©marrer l'exÃ©cution
            self.is_running = True
            logger.info("DÃ©marrage de l'exÃ©cution")
            start_button.disabled = True
            logger.debug("Bouton dÃ©sactivÃ©")

            # RÃ©initialiser l'interface
            self.update_global_progress(0)
            self.set_current_plugin("aucun")
            await LoggerUtils.clear_logs(self)

            # ExÃ©cuter les plugins
            await self.run_plugins()

        except Exception as e:
            logger.error(f"Erreur lors du dÃ©marrage de l'exÃ©cution : {str(e)}")
            error_msg = Message(MessageType.ERROR, f"Erreur lors du dÃ©marrage : {str(e)}")
            await LoggerUtils.display_message(self, error_msg)
            
            # RÃ©activer le bouton en cas d'erreur
            start_button.disabled = False
            logger.debug("Bouton rÃ©activÃ© aprÃ¨s erreur")
        finally:
            self.is_running = False
            # RÃ©activer le bouton
            start_button.disabled = False

    def update_global_progress(self, progress: float):
        """Mise Ã  jour de la progression globale"""
        progress_bar = self.query_one("#global-progress")
        if progress_bar:
            progress_bar.update(total=100.0, progress=progress * 100)

    def set_current_plugin(self, plugin_name: str):
        """Met Ã  jour l'affichage du plugin courant et scrolle vers lui"""
        # Trouver le plugin en cours et scroller vers lui
        plugins_list = self.query_one("#plugins-list")
        if plugins_list:
            for plugin_id, plugin in self.plugins.items():
                if plugin.plugin_name == plugin_name:
                    # Scroller vers le plugin
                    plugin.scroll_visible()
                    break

    def action_toggle_logs(self) -> None:
        """Afficher/Masquer les logs (appelÃ© par le raccourci clavier ou le bouton)"""
        LoggerUtils.toggle_logs(self)
        
    # MÃ©thode pour compatibilitÃ© avec loggers existants
    async def display_log(self, message, level="info"):
        """MÃ©thode pour compatibilitÃ© avec anciens systÃ¨mes de logs"""
        await LoggerUtils.add_log(self, message, level)

    def compose(self) -> ComposeResult:
        """CrÃ©ation de l'interface"""
        # En-tÃªte
        yield Header(name="ExÃ©cution des plugins")

        # Liste des plugins
        with ScrollableContainer(id="plugins-list"):
            # CrÃ©er les conteneurs de plugins
            logger.debug(f"CrÃ©ation des conteneurs pour {len(self.plugins_config)} plugins")
            for plugin_id, config in self.plugins_config.items():
                # RÃ©cupÃ©rer le nom du plugin depuis son dossier
                folder_name = get_plugin_folder_name(plugin_id)
                plugin_name = config.get('plugin_name', folder_name)
                plugin_icon = config.get('icon', 'ğŸ“¦')
                plugin_show_name = config.get('name', plugin_name)
                logger.debug(f"CrÃ©ation du conteneur pour {plugin_id}: nom={plugin_name}, affichage={plugin_show_name}")
                container = PluginContainer(plugin_id, plugin_name, plugin_show_name, plugin_icon)
                self.plugins[plugin_id] = container
                logger.debug(f"Conteneur ajoutÃ© pour {plugin_id}: {plugin_name}")
                yield container

        # Zone des logs (visible par dÃ©faut)
        with Horizontal(id="logs"):
            with ScrollableContainer(id="logs-container"):
                yield Static("", id="logs-text")
        
        with Horizontal(id="button-container"):
            yield Button("Retour", id="back-button", variant="error")
            yield Checkbox("Continuer en cas d'erreur", id="continue-on-error", value=True)
            yield Label("Progression globale", id="global-progress-label")
            yield ProgressBar(id="global-progress", show_eta=False)
            yield Button("DÃ©marrer", id="start-button", variant="primary")

        yield Footer()

    async def on_mount(self) -> None:
        """AppelÃ© au montage initial du widget"""
        # Initialisation basique
        self.update_global_progress(0)
        self.set_current_plugin("aucun")

        # Initialiser l'Ã©tat de la checkbox
        self.continue_on_error = True  # True par dÃ©faut

        # Initialiser l'affichage des logs
        await LoggerUtils.clear_logs(self)


    async def on_checkbox_changed(self, event: Checkbox.Changed) -> None:
        """Gestion du changement d'Ã©tat de la checkbox"""
        if event.checkbox.id == "continue-on-error":
            self.continue_on_error = event.value
            logger.debug(f"Option 'continuer en cas d'erreur' changÃ©e Ã : {self.continue_on_error}")

    async def on_button_pressed(self, event: Button.Pressed) -> None:
        """Gestion des clics sur les boutons"""
        button_id = event.button.id
        logger.debug(f"Clic sur le bouton {button_id}")

        if not button_id:
            logger.warning("Bouton sans identifiant dÃ©tectÃ©")
            return

        try:
            if button_id == "start-button" and not event.button.disabled:
                # VÃ©rifier si le bouton n'est pas dÃ©jÃ  dÃ©sactivÃ©
                await self.start_execution()
            elif button_id == "back-button":
                # Import ici pour Ã©viter les imports circulaires
                from ..config_screen.config_screen import PluginConfig

                # Extraire les infos de plugin_id
                plugin_instances = []
                for plugin_id in self.plugins_config.keys():
                    # RÃ©cupÃ©rer le dossier du plugin
                    folder_name = get_plugin_folder_name(plugin_id)
                    # Extraire l'instance ID (dernier nombre)
                    instance_id = int(plugin_id.split('_')[-1])
                    # Ajouter le tuple (nom_plugin, instance_id)
                    plugin_instances.append((folder_name, instance_id))

                # CrÃ©er l'Ã©cran de configuration
                config_screen = PluginConfig(plugin_instances)

                # Revenir Ã  l'Ã©cran de configuration
                self.app.switch_screen(config_screen)
            elif button_id == "toggle-logs-button":
                # Afficher/Masquer les logs
                self.action_toggle_logs()
            elif button_id == "quit-button":
                self.app.exit()

        except Exception as e:
            logger.error(f"Erreur lors du traitement du clic sur {button_id} : {str(e)}")
            # En cas d'erreur sur le bouton start, on le rÃ©active
            if button_id == "start-button":
                event.button.disabled = False
                logger.debug("Bouton rÃ©activÃ© aprÃ¨s erreur")
            # Propager l'erreur pour le traitement global
            raise