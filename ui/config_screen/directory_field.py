from textual.app import ComposeResult
from textual.widgets import Button, Input
from textual.containers import VerticalGroup, Horizontal
from subprocess import Popen, PIPE
from typing import Any, Optional, Tuple, Dict, List, Union, cast
import os

from .text_field import TextField
from ..utils.logging import get_logger

logger = get_logger('directory_field')

class DirectoryField(TextField):
    """Champ de s√©lection de r√©pertoire avec un bouton de navigation"""
    
    def __init__(self, source_id: str, field_id: str, field_config: dict, fields_by_id: dict = None, is_global: bool = False):
        """
        Initialisation du champ avec les options sp√©cifiques aux r√©pertoires.
        
        Args:
            source_id: ID de la source (plugin ou config globale)
            field_id: ID du champ
            field_config: Configuration du champ
            fields_by_id: Dictionnaire des champs par ID
            is_global: Indique si c'est un champ global
        """
        # D√©finir le bouton avant d'appeler super().__init__
        self._browse_button: Optional[Button] = None
        
        # Flag pour suivre les mises √† jour
        self._updating_disabled_state = False
        self._pending_disabled_state = None
        self._disabled_initialization_done = False
        
        # Appeler l'initialisation du parent (TextField)
        # Cela initialisera notamment _internal_value et g√®rera la validation
        super().__init__(source_id, field_id, field_config, fields_by_id, is_global)
        
        logger.debug(f"Initialisation du champ r√©pertoire {self.field_id}, disabled={getattr(self, 'disabled', False)}")
    
    def compose(self) -> ComposeResult:
        """
        Composition des √©l√©ments visuels du champ.
        
        Returns:
            ComposeResult: R√©sultat de la composition des widgets
        """
        # 1. R√©cup√©rer les widgets de base du TextField
        parent_widgets = list(super().compose())
        
        # 2. Rendre les widgets de base
        for widget in parent_widgets:
            yield widget

        # 3. Ajouter le bouton Browse en dehors du conteneur d'input
        self._browse_button = Button(
            "Parcourir...", 
            id=f"browse_{self.field_id}", 
            classes="browse-button"
        )
        
        # Appliquer l'√©tat disabled au bouton si n√©cessaire
        if hasattr(self, 'disabled') and self.disabled:
            logger.debug(f"Application de l'√©tat disabled au bouton browse lors de la composition pour {self.field_id}")
            self._browse_button.disabled = True
            
        yield self._browse_button
    
    def on_mount(self) -> None:
        """
        Ex√©cut√© apr√®s cr√©ation des widgets.
        """
        logger.debug(f"üî¥ MONTAGE du champ r√©pertoire {self.field_id}, disabled={getattr(self, 'disabled', False)}")
        
        # Appeler la m√©thode du parent (TextField) pour la gestion des valeurs en attente
        # et l'application des valeurs stock√©es dans _internal_value ou _pending_value
        super().on_mount()
        
        # Forcer la mise √† jour de l'√©tat disabled pour le bouton de navigation
        if hasattr(self, '_browse_button') and self._browse_button:
            logger.debug(f"Application de l'√©tat disabled={self.disabled} au bouton browse lors du montage pour {self.field_id}")
            self._browse_button.disabled = self.disabled
        
        # V√©rifier l'√©tat d'activation selon la d√©pendance
        self._check_enabled_state()
        
        # Marquer que l'initialisation est termin√©e
        self._disabled_initialization_done = True
        
        # Si un √©tat est en attente d'application, l'appliquer maintenant
        if self._pending_disabled_state is not None:
            logger.debug(f"Application de l'√©tat en attente disabled={self._pending_disabled_state} pour {self.field_id}")
            self.set_disabled(self._pending_disabled_state)
            self._pending_disabled_state = None
    
    def set_disabled(self, disabled: bool) -> None:
        """
        D√©sactive ou active √† la fois le champ texte et le bouton browse.
        
        Args:
            disabled: True pour d√©sactiver, False pour activer
        """
        # Protection contre les mises √† jour r√©cursives
        if self._updating_disabled_state:
            logger.debug(f"üîÑ √âvitement de r√©cursion dans set_disabled pour {self.field_id}")
            return
            
        # Si l'initialisation n'est pas termin√©e, stocker l'√©tat pour application ult√©rieure
        if not hasattr(self, '_disabled_initialization_done') or not self._disabled_initialization_done:
            logger.debug(f"‚è≥ Initialisation non termin√©e pour {self.field_id}, √©tat disabled={disabled} mis en attente")
            self._pending_disabled_state = disabled
            return
            
        try:
            self._updating_disabled_state = True
            logger.debug(f"set_disabled appel√© pour {self.field_id} avec disabled={disabled}")
            
            # Stocker l'√©tat disabled
            self.disabled = disabled
            
            # Mettre √† jour l'√©tat du champ texte
            if hasattr(self, 'input') and self.input:
                logger.debug(f"Mise √† jour de l'√©tat du champ texte pour {self.field_id}: disabled={disabled}")
                self.input.disabled = disabled
                if disabled:
                    self.input.add_class('disabled')
                else:
                    self.input.remove_class('disabled')
            
            # Ajouter/supprimer la classe disabled sur le widget lui-m√™me
            if disabled:
                self.add_class('disabled')
            else:
                self.remove_class('disabled')
            
            # D√©sactiver aussi le bouton browse s'il existe
            if hasattr(self, '_browse_button') and self._browse_button:
                logger.debug(f"Mise √† jour de l'√©tat du bouton browse pour {self.field_id}: disabled={disabled}")
                self._browse_button.disabled = disabled
            else:
                logger.debug(f"Bouton browse non encore disponible pour {self.field_id}, l'√©tat disabled={disabled} sera appliqu√© lors de la composition")
        finally:
            self._updating_disabled_state = False
    
    def _check_enabled_state(self) -> None:
        """
        V√©rifie si le champ doit √™tre activ√© ou d√©sactiv√© selon ses d√©pendances.
        Version am√©lior√©e avec recherche plus robuste du champ d√©pendant.
        """
        if not hasattr(self, 'enabled_if') or not self.enabled_if:
            logger.debug(f"Pas de condition enabled_if pour {self.field_id}")
            return
            
        # R√©cup√©rer les champs disponibles
        fields_by_id = {}
        if hasattr(self, 'fields_by_id'):
            fields_by_id = self.fields_by_id
            
        dep_field_id = self.enabled_if['field']
        required_value = self.enabled_if.get('value')
        logger.debug(f"üîç Condition enabled_if pour {self.field_id}: d√©pend de {dep_field_id} avec valeur requise {required_value} (type: {type(required_value).__name__})")

        # Recherche du champ d√©pendant avec toutes les m√©thodes possibles
        dep_field = None
        
        # 1. Recherche directe
        if dep_field_id in fields_by_id:
            dep_field = fields_by_id[dep_field_id]
            logger.debug(f"Champ d√©pendant trouv√© directement: {dep_field_id}")
        
        # 2. Recherche avec le pr√©fixe du source_id (plugin.field_id)
        elif f"{self.source_id}.{dep_field_id}" in fields_by_id:
            dep_field = fields_by_id[f"{self.source_id}.{dep_field_id}"]
            logger.debug(f"Champ d√©pendant trouv√© avec pr√©fixe: {self.source_id}.{dep_field_id}")
            
        # 3. Recherche via un parcours des champs
        else:
            for field_key, field_obj in fields_by_id.items():
                # V√©rifier les attributs du champ
                if hasattr(field_obj, 'field_id') and field_obj.field_id == dep_field_id:
                    if hasattr(field_obj, 'source_id') and field_obj.source_id == self.source_id:
                        dep_field = field_obj
                        logger.debug(f"Champ d√©pendant trouv√© par attributs: {field_key}")
                        break

        # Si le champ d√©pendant n'est pas trouv√©
        if not dep_field:
            logger.debug(f"‚ùå Champ d√©pendant {dep_field_id} non trouv√© pour {self.field_id}")
            return
            
        # R√©cup√©rer la valeur du champ d√©pendant
        if hasattr(dep_field, 'get_value'):
            dep_value = dep_field.get_value()
            logger.debug(f"‚úÖ Valeur r√©cup√©r√©e pour {dep_field_id}: {dep_value} (type: {type(dep_value).__name__})")
        elif hasattr(dep_field, 'value'):
            dep_value = dep_field.value
            logger.debug(f"‚úÖ Valeur r√©cup√©r√©e via attribut value pour {dep_field_id}: {dep_value}")
        else:
            logger.debug(f"‚ùå Impossible de r√©cup√©rer la valeur pour {dep_field_id}")
            return

        # Normaliser les valeurs bool√©ennes pour la comparaison
        normalized_dep_value = self._normalize_bool_value(dep_value)
        normalized_required_value = self._normalize_bool_value(required_value)
        
        logger.debug(f"üîÑ Apr√®s normalisation: {dep_field_id}={normalized_dep_value} (avant: {dep_value}), requis={normalized_required_value} (avant: {required_value})")
        
        # D√©terminer si le champ doit √™tre activ√© ou d√©sactiv√©
        should_enable = normalized_dep_value == normalized_required_value
        
        # Mettre √† jour l'√©tat disabled si n√©cessaire
        if self.disabled is not (not should_enable):  # Si l'√©tat actuel ne correspond pas √† ce qu'il devrait √™tre
            logger.debug(f"üîÑ Mise √† jour de l'√©tat disabled pour {self.field_id}: {self.disabled} -> {not should_enable}")
            self.set_disabled(not should_enable)
        else:
            logger.debug(f"‚úì L'√©tat disabled pour {self.field_id} est d√©j√† correct: {self.disabled}")

    
    def _normalize_bool_value(self, value: Any) -> Any:
        """
        Normalise une valeur en bool√©en si possible.
        
        Args:
            value: Valeur √† normaliser
            
        Returns:
            Any: Valeur normalis√©e ou originale si non bool√©enne
        """
        # Si c'est d√©j√† un bool√©en, le retourner tel quel
        if isinstance(value, bool):
            return value
            
        # Si c'est une cha√Æne qui repr√©sente un bool√©en
        if isinstance(value, str):
            if value.lower() in ('true', 't', 'yes', 'y', '1'):
                return True
            elif value.lower() in ('false', 'f', 'no', 'n', '0'):
                return False
                
        # Pour d'autres types, utiliser la conversion standard
        # Mais seulement pour les types compatibles avec les bool√©ens
        if value is not None:
            try:
                return bool(value)
            except:
                pass
                
        # Retourner la valeur originale si non convertible
        return value
    
    async def on_button_pressed(self, event: Button.Pressed) -> None:
        """
        Gestion du clic sur le bouton Browse.
        
        Args:
            event: √âv√©nement de bouton press√©
        """
        # V√©rifier que c'est bien notre bouton
    
    def validate_input(self, value: str) -> Tuple[bool, str]:
        """
        Validation sp√©cifique pour les chemins de r√©pertoire.
        
        Args:
            value: Valeur √† valider
            
        Returns:
            Tuple[bool, str]: (validit√©, message d'erreur)
        """
        # Si le champ est d√©sactiv√©, pas de validation n√©cessaire
        if getattr(self, 'disabled', False):
            return True, ""
        
        # Utiliser d'abord la validation de base (vide, longueur, etc.)
        is_valid, error_msg = super().validate_input(value)
        if not is_valid:
            return is_valid, error_msg
        
        # Validation sp√©cifique aux r√©pertoires
        # Par exemple, v√©rifier si c'est un chemin existant si 'exists' est sp√©cifi√©
        if value and self.field_config.get('exists', False):
            import os
            if not os.path.exists(value):
                return False, "Ce r√©pertoire n'existe pas"
            if not os.path.isdir(value):
                return False, "Ce chemin n'est pas un r√©pertoire"
        
        # Si on arrive ici, tout est valide
        return True, ""
    

        if event.button.id != f"browse_{self.field_id}":
            return
            
        logger.debug(f"üîç Bouton Browse press√© pour {self.field_id}")
        
        # Ne rien faire si le champ est d√©sactiv√©
        if getattr(self, 'disabled', False):
            logger.debug(f"‚ö†Ô∏è Bouton Browse ignor√© car le champ est d√©sactiv√©")
            return
        
        # Lancer la bo√Æte de dialogue de s√©lection de r√©pertoire via zenity
        try:
            from subprocess import Popen, PIPE
            import os
            
            # Utiliser le r√©pertoire actuel comme point de d√©part si d√©j√† d√©fini
            current_dir = self._internal_value if hasattr(self, '_internal_value') and self._internal_value else ""
            
            # Args pour zenity - d√©marrer dans le r√©pertoire actuel si possible
            zenity_args = ['zenity', '--file-selection', '--directory']
            if current_dir and os.path.isdir(current_dir):
                zenity_args.extend(['--filename', current_dir])
                
            logger.debug(f"Ex√©cution de zenity avec arguments: {zenity_args}")
            process = Popen(zenity_args, stdout=PIPE, stderr=PIPE)
            stdout, stderr = process.communicate()
            
            if stderr:
                logger.debug(f"Zenity stderr: {stderr.decode()}")
                
            # Si r√©ussi, appliquer le r√©pertoire s√©lectionn√©
            if process.returncode == 0:
                selected_dir = stdout.decode().strip()
                logger.debug(f"R√©pertoire s√©lectionn√©: '{selected_dir}'")
                
                # Mise √† jour de la valeur via notre m√©thode standard
                if selected_dir and (not hasattr(self, '_internal_value') or selected_dir != self._internal_value):
                    logger.debug(f"Application du r√©pertoire s√©lectionn√© pour {self.field_id}")
                    self.set_value(selected_dir)
            else:
                logger.debug(f"S√©lection de r√©pertoire annul√©e ou √©chou√©e (code: {process.returncode})")
                    
        except Exception as e:
            logger.error(f"Erreur lors de la s√©lection du r√©pertoire: {e}")
            import traceback
            logger.error(traceback.format_exc())